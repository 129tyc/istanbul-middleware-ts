name: Release and Publish

on:
  push:
    tags:
      - "v*" # Trigger when pushing tags starting with v, e.g. v1.0.0
  workflow_dispatch: # Allow manual trigger

permissions:
  contents: write
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run build
        run: npm run build

      - name: Run tests (if any)
        run: npm test --if-present

      - name: Test server startup
        run: |
          timeout 10s npm run test-server || true
          echo "Server startup test completed"

  publish-npm:
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Check package contents
        run: npm pack --dry-run

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-release:
    needs: publish-npm
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for proper tag comparison

      - name: Get tag version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        run: |
          CURRENT_TAG=${{ steps.get_version.outputs.VERSION }}
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          # Create release notes file
          cat > release_notes.md << 'EOF'
          ## ðŸš€ Release $CURRENT_TAG

          ### ðŸ“¦ Installation
          ```bash
          npm install istanbul-middleware-ts
          ```

          ### ðŸ”§ Quick Start
          ```typescript
          import { createHandler } from 'istanbul-middleware-ts';
          app.use('/coverage', createHandler());
          ```

          ### ðŸ“‹ What's Changed
          EOF

          # Add commit messages between tags
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Generating changelog from $PREVIOUS_TAG to $CURRENT_TAG"
            git log --pretty=format:"- %s (%an)" "$PREVIOUS_TAG"..HEAD \
              | grep -v "Merge pull request" \
              | grep -v "Bump version" \
              | grep -v "chore(release)" \
              | head -20 >> release_notes.md
            
            echo "" >> release_notes.md
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$CURRENT_TAG" >> release_notes.md
          else
            echo "- Initial release with Istanbul coverage middleware" >> release_notes.md
            echo "- TypeScript support with full type definitions" >> release_notes.md
            echo "- Express.js integration" >> release_notes.md
            echo "- Coverage reporting and download functionality" >> release_notes.md
          fi

          echo "" >> release_notes.md
          echo "ðŸ“– **Documentation**: [README.md](https://github.com/${{ github.repository }}/blob/main/README.md)" >> release_notes.md

          # Set output
          {
            echo "RELEASE_NOTES<<EOF"
            cat release_notes.md
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: "Release ${{ steps.get_version.outputs.VERSION }}"
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
