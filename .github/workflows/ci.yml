name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 21]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check TypeScript compilation
        run: npm run build

      - name: Run linting
        run: npm run lint --if-present

      - name: Run tests with coverage
        run: npm test -- --coverage --coverageReporters=text --coverageReporters=lcov

      - name: Check test coverage thresholds
        run: |
          # Extract coverage percentages from test output
          COVERAGE_OUTPUT=$(npm test -- --coverage --silent 2>&1 | grep -E "All files.*%" || echo "No coverage found")
          echo "Coverage Report:"
          echo "$COVERAGE_OUTPUT"

          # Check if coverage meets minimum thresholds
          if npm test -- --coverage --silent 2>&1 | grep -q "Coverage threshold"; then
            echo "Coverage thresholds not met!"
            exit 1
          fi

      - name: Upload coverage to Codecov
        if: matrix.node-version == '20'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Test server functionality
        run: |
          # Start server in background
          npm run test-server &
          SERVER_PID=$!

          # Wait for server to start
          sleep 5

          # Test endpoints
          curl -f http://localhost:3000/health || exit 1
          curl -f http://localhost:3000/ || exit 1
          curl -f http://localhost:3000/coverage || exit 1

          # Test coverage endpoints
          curl -X POST -f http://localhost:3000/coverage/reset || exit 1
          curl -f http://localhost:3000/coverage/object || exit 1

          # Kill server
          kill $SERVER_PID

      - name: Check package can be packed
        run: npm pack --dry-run

      - name: Verify dist directory
        run: |
          if [ ! -d "dist" ]; then
            echo "dist directory not found!"
            exit 1
          fi
          ls -la dist/

  security-audit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Check for outdated dependencies
        run: npm outdated || true

  coverage-check:
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate coverage report
        run: npm test -- --coverage

      - name: Check coverage quality
        run: |
          echo "Checking coverage quality..."

          # Run coverage and capture output
          COVERAGE_REPORT=$(npm test -- --coverage --silent 2>&1)

          # Extract coverage percentages
          STMT_COV=$(echo "$COVERAGE_REPORT" | grep -E "All files.*%" | awk '{print $2}' | sed 's/%//' || echo "0")
          BRANCH_COV=$(echo "$COVERAGE_REPORT" | grep -E "All files.*%" | awk '{print $3}' | sed 's/%//' || echo "0")
          FUNC_COV=$(echo "$COVERAGE_REPORT" | grep -E "All files.*%" | awk '{print $4}' | sed 's/%//' || echo "0")
          LINE_COV=$(echo "$COVERAGE_REPORT" | grep -E "All files.*%" | awk '{print $5}' | sed 's/%//' || echo "0")

          echo "Statement Coverage: ${STMT_COV}%"
          echo "Branch Coverage: ${BRANCH_COV}%"
          echo "Function Coverage: ${FUNC_COV}%"
          echo "Line Coverage: ${LINE_COV}%"

          # Set minimum thresholds
          MIN_STMT=70
          MIN_BRANCH=60
          MIN_FUNC=80
          MIN_LINE=70

          # Check thresholds (using bc for floating point comparison)
          if (( $(echo "$STMT_COV < $MIN_STMT" | bc -l) )); then
            echo "❌ Statement coverage ${STMT_COV}% is below minimum ${MIN_STMT}%"
            exit 1
          fi

          if (( $(echo "$BRANCH_COV < $MIN_BRANCH" | bc -l) )); then
            echo "❌ Branch coverage ${BRANCH_COV}% is below minimum ${MIN_BRANCH}%"
            exit 1
          fi

          if (( $(echo "$FUNC_COV < $MIN_FUNC" | bc -l) )); then
            echo "❌ Function coverage ${FUNC_COV}% is below minimum ${MIN_FUNC}%"
            exit 1
          fi

          if (( $(echo "$LINE_COV < $MIN_LINE" | bc -l) )); then
            echo "❌ Line coverage ${LINE_COV}% is below minimum ${LINE_COV}%"
            exit 1
          fi

          echo "✅ All coverage thresholds met!"

      - name: Generate coverage badge
        if: github.ref == 'refs/heads/main'
        run: |
          # This could be used to generate coverage badges
          echo "Coverage check completed successfully"
