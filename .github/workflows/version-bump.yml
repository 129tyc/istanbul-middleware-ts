name: Version Bump

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      prerelease_tag:
        description: "Prerelease tag (only for prerelease)"
        required: false
        default: "beta"

permissions:
  contents: write
  actions: write

jobs:
  bump-version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Install dependencies
        run: npm ci

      - name: Bump version
        id: version
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Calculate new version manually to avoid npm version scripts
          if [ "${{ github.event.inputs.version_type }}" = "prerelease" ]; then
            # For prerelease, use semver logic
            NEW_VERSION=$(node -e "
              const semver = require('semver');
              const current = '$CURRENT_VERSION';
              const tag = '${{ github.event.inputs.prerelease_tag }}';
              if (semver.prerelease(current)) {
                console.log(semver.inc(current, 'prerelease', tag));
              } else {
                console.log(semver.inc(current, 'prerelease', tag));
              }
            " 2>/dev/null || echo "${CURRENT_VERSION}-${{ github.event.inputs.prerelease_tag }}.0")
          else
            # For regular versions, use manual calculation
            NEW_VERSION=$(node -e "
              const version = '$CURRENT_VERSION'.split('.');
              let major = parseInt(version[0]);
              let minor = parseInt(version[1]);
              let patch = parseInt(version[2]);
              
              if ('${{ github.event.inputs.version_type }}' === 'major') {
                major++;
                minor = 0;
                patch = 0;
              } else if ('${{ github.event.inputs.version_type }}' === 'minor') {
                minor++;
                patch = 0;
              } else if ('${{ github.event.inputs.version_type }}' === 'patch') {
                patch++;
              }
              
              console.log(\`\${major}.\${minor}.\${patch}\`);
            ")
          fi

          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

          # Update package.json manually
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            pkg.version = '$NEW_VERSION';
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
          "

          # Update package-lock.json if it exists
          if [ -f package-lock.json ]; then
            node -e "
              const fs = require('fs');
              const pkg = JSON.parse(fs.readFileSync('package-lock.json', 'utf8'));
              pkg.version = '$NEW_VERSION';
              if (pkg.packages && pkg.packages['']) {
                pkg.packages[''].version = '$NEW_VERSION';
              }
              fs.writeFileSync('package-lock.json', JSON.stringify(pkg, null, 2) + '\n');
            "
          fi

      - name: Update CHANGELOG
        run: |
          # Create or update CHANGELOG.md
          echo "## ${{ steps.version.outputs.version_tag }} - $(date +'%Y-%m-%d')" > CHANGELOG_NEW.md
          echo "" >> CHANGELOG_NEW.md
          echo "### Added" >> CHANGELOG_NEW.md
          echo "- New features and improvements" >> CHANGELOG_NEW.md
          echo "" >> CHANGELOG_NEW.md
          echo "### Fixed" >> CHANGELOG_NEW.md
          echo "- Bug fixes and patches" >> CHANGELOG_NEW.md
          echo "" >> CHANGELOG_NEW.md

          if [ -f CHANGELOG.md ]; then
            cat CHANGELOG.md >> CHANGELOG_NEW.md
          fi
          mv CHANGELOG_NEW.md CHANGELOG.md

      - name: Commit changes
        run: |
          echo "📝 Staging files..."
          git add package.json package-lock.json CHANGELOG.md
          git status

          echo "💾 Creating commit..."
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"

          echo "🏷️ Creating tag: ${{ steps.version.outputs.version_tag }}"
          git tag ${{ steps.version.outputs.version_tag }}

          echo "📋 Verifying tag creation..."
          git tag -l "${{ steps.version.outputs.version_tag }}"
          git show ${{ steps.version.outputs.version_tag }} --no-patch --format="Tag: %D%nCommit: %H%nMessage: %s"

      - name: Push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔧 Configuring git remote..."
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git

          echo "📤 Pushing commit to main..."
          git push origin main

          echo "📤 Pushing tag: ${{ steps.version.outputs.version_tag }}"
          git push origin ${{ steps.version.outputs.version_tag }}

          echo "✅ Push completed successfully!"
          echo "🔍 Verifying remote tags..."
          git ls-remote --tags origin | grep "${{ steps.version.outputs.version_tag }}" || echo "⚠️ Tag not found in remote"

  notify:
    needs: bump-version
    runs-on: ubuntu-latest

    steps:
      - name: Notify success
        run: |
          echo "✅ Version bumped successfully!"
          echo "🏷️ New tag will trigger release workflow"
          echo "📦 Package will be published to npm automatically"
          echo ""
          echo "🔍 Release workflow should be triggered by tag push"
          echo "📋 Check the Actions tab for the 'Release and Publish' workflow"
          echo "🌐 Release workflow trigger: on.push.tags: 'v*'"
