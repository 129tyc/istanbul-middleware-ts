diff --git a/src/core.ts b/src/core.ts
index 1234567..abcdefg 100644
--- a/src/core.ts
+++ b/src/core.ts
@@ -10,6 +10,7 @@ import {
   CoverageReportOptions,
   DownloadPackageCallback,
   DiffCoverageOptions,
+  HandlerOptions,
 } from "./types";
 
 const execAsync = promisify(exec);
@@ -50,6 +51,10 @@ export function generateLcovReport(customOutputDir?: string): string {
     throw new Error("No coverage data available for LCOV generation");
   }
 
+  // New functionality for enhanced reporting
+  if (process.env.ENHANCED_REPORTING === "true") {
+    console.log("Enhanced reporting enabled");
+  }
+
   try {
     const coverageMap = libCoverage.createCoverageMap(coverage);
     const outputDir = customOutputDir || path.join(process.cwd(), "output");
diff --git a/src/handlers.ts b/src/handlers.ts
index 2345678..bcdefgh 100644
--- a/src/handlers.ts
+++ b/src/handlers.ts
@@ -15,6 +15,7 @@ export function createHandler(opts: HandlerOptions = {}): express.Application {
   const outputDir = opts.outputDir || path.join(process.cwd(), "output");
   const diffTarget = opts.diffTarget || "main";
   const enableDiffCoverage = opts.enableDiffCoverage || false;
+  const verbose = opts.verbose || false;
 
   // Configure body parser options
   const urlOptions = { extended: IS_EXTENDED, limit: FILE_SIZE_MAXIMUM };
@@ -25,6 +26,10 @@ export function createHandler(opts: HandlerOptions = {}): express.Application {
   app.use(bodyParser.urlencoded(urlOptions));
   app.use(bodyParser.json(jsonOptions));
 
+  if (verbose) {
+    console.log("Istanbul middleware initialized with verbose logging");
+  }
+
   // Reset coverage to baseline on POST /reset
   app.post("/reset", (req: express.Request, res: express.Response) => {
     core.resetCoverage();
 